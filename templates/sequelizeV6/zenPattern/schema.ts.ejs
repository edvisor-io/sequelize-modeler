<%_
const modelName = include('_partials/modelNames.ejs', {
  modelName: changeCase.pascalCase(table.name),
})
const attributesInterfaceName = `${modelName}Attributes`
const createAttributeInterfaceName = `${modelName}CreateAttributes`
const associationsInterfaceName = `${modelName}Relations`
const modelInterfaceName = `${modelName}Model`
const hasCreated = table.columns.has('created')
const hasModified = table.columns.has('modified')
const quote = getQuote()
const optionalAttributes = Array.from(table.columns.entries()).filter(([columnName, column]) => column.primaryKey ||
  column.allowNull ||
  _.includes(['created', 'modified'], columnName)
).map(([ columnName ]) => columnName)

const findAlias = ({ source, target, foreignKey, associationType }, targetModel) => {
  const refName = (foreignKey.slice(-3).toLowerCase() === '_id') ? foreignKey.slice(0, -3) : foreignKey
  let baseName = targetModel
  if (associationType === 'belongsTo' && refName !== target) {
    baseName = refName
  } else if (associationType === 'hasMany' && refName !== source) {
    baseName = refName + targetModel
  }

  return changeCase.camelCase(baseName)
}

const pluralize = (text) => {
  if (text.endsWith('s')) return text + 'es'
  if (text.endsWith('y')) return text.slice(0, -1) + 'ies'
  return text + 's'
}

const associations = _(table.associations)
  .map((association) => {
    const targetModel = include('_partials/modelNames.ejs', { modelName: changeCase.pascalCase(association.target) })
    const isMany = association.associationType.endsWith('Many')
    const aliasSingular = findAlias(association, targetModel)
    const alias = isMany ? pluralize(aliasSingular) : aliasSingular 

    return {
      alias,
      aliasSingular,
      isMany,
      tsType: targetModel,
      tsType: targetModel,
      associationType: association.associationType
    }
  })
  .sortBy('name')
  .value()

const associationsImports = _(table.associations)
  .map((association) => {
    return include('_partials/modelNames.ejs', { modelName: changeCase.pascalCase(association.target) })
  })
  .pull(modelName)
  .sortBy()
  .sortedUniq() // the same association target could be required by multiple associations, e.g. `ownerId` and `userId`
  .value()

const sequelizeDependencies = _(['DataTypes', 'Model', !_.isEmpty(optionalAttributes) ? 'Optional' : undefined,
  ...table.associations.reduce((associationDeps, { associationType }) => {
    switch (associationType) {
      case 'hasOne': {
        associationDeps.push('HasOneGetAssociationMixin', 'HasOneSetAssociationMixin', 'HasOneCreateAssociationMixin')
        break
      }
      case 'hasMany': {
        associationDeps.push('HasManyGetAssociationsMixin', 'HasManyAddAssociationMixin', 'HasManyHasAssociationMixin',
          'HasManyCountAssociationsMixin', 'HasManyCreateAssociationMixin')
        break
      }
      case 'belongsTo': {
        associationDeps.push('BelongsToGetAssociationMixin', 'BelongsToSetAssociationMixin',
          'BelongsToCreateAssociationMixin')
        break
      }
      case 'belongsToMany': {
        associationDeps.push('BelongsToManyGetAssociationsMixin', 'BelongsToManyAddAssociationsMixin',
          'BelongsToManyHasAssociationsMixin', 'BelongsToManyCountAssociationsMixin',
          'BelongsToManyCreateAssociationMixin')
        break
      }
    }
    return associationDeps
  }, [])
])
  .sortBy()
  .sortedUniq()
  .value()


const fileName = changeCase.paramCase(modelName)
setOutputFileName(`server/sequelize/schema/${fileName}.ts`)
-%>
// <%= quote.text %> - <%= quote.author %>
// Generated: <%= new Date().toLocaleDateString()  %>

import {
<%_ sequelizeDependencies.forEach((deps) => { -%>
  <%= deps %>,
<%_ }) -%>
} from 'sequelize'

import {
  AppSchema,
  <%_ if (hasCreated) { -%>
  CreateAttribute,
  <%_ } if (hasModified) { -%>
  ModifyAttribute,
  <%_ } -%>
} from '.'

import {
  <%= modelName %>,
  <%_ associationsImports.forEach((deps) => { -%>
  <%= deps %>,
  <%_ }) -%>
} from '../models'

export <%- include('_partials/modelClass.ts.ejs', {
  table,
  modelName: `${modelName}Schema`,
  modelInterfaceName,
  createAttributeInterfaceName,
  associations
}) %>

export <%- include('_partials/attributesInterface.ts.ejs', {
  table,
  attributesInterfaceName,
  hasCreated,
  hasModified
}) %>

export <%- include('_partials/createAttributesInterface.ts.ejs', {
  table,
  attributesInterfaceName,
  createAttributeInterfaceName,
  optionalAttributes
}) %>

export <%- include('_partials/modelAssociationInterface.ts.ejs', {
  table,
  associationsInterfaceName,
  associations
}) %>

export type <%= modelInterfaceName %> = <%= attributesInterfaceName %> & Partial<<%= associationsInterfaceName %>>

export const schema: AppSchema<typeof <%= modelName %>> = {
  init: (sequelize, model) => {
    model.init({
    <%_ table.columns.forEach((column, columnName) => { -%>
      <%= changeCase.camelCase(columnName) %>: {
<%- include('_partials/dataType.ejs', {
  column,
  changeCase,
  _
}) -%>,
        field: '<%= columnName %>',
        <%_ if (column.primaryKey) { -%>
        primaryKey: true,
        <%_ } if (column.autoIncrement) { -%>
        autoIncrement: true,
        <%_ } if (!column.allowNull) { -%>
        allowNull: false,
        <%_ } if (!!column.unique) { -%>
        unique: <%- (_.isString(column.unique)) ? `'${column.unique}'` : column.unique %>,
        <%_ } if (!_.isEmpty(column.comment)) { -%>
        comment: '<%= column.comment %>',
        <%_ } if (!_.isEmpty(column.reference)) { -%>
        references: <%- include('_partials/reference.ejs', { reference: column.reference }) -%>
        <%_ } -%>
      },
    <%_ }) -%>
    }, {
      sequelize,
      tableName: '<%= table.name %>',
      timestamps: <%= (hasCreated | hasModified) ? true : false %>,
      createdAt: <%- (hasCreated) ? `'created'` : false %>,
      updatedAt: <%- (hasModified) ? `'modified'` : false %>,
    })
  },
  associate: (<% if (!!table.associations.length) { %>models<% } %>) => {
  <%_ 
  table.associations.forEach((association) => {
    const targetModel = include('_partials/modelNames.ejs', { modelName: changeCase.pascalCase(association.target) })
    const throughModel = association.through && include('_partials/modelNames.ejs', { modelName: changeCase.pascalCase(association.through) })
    const isMany = association.associationType.endsWith('Many')
    const asAlias = isMany ? pluralize(findAlias(association, targetModel)) : findAlias(association, targetModel) 
  -%>
    models.<%= modelName %>.<%= association.associationType %>(models.<%= targetModel %>, {
      foreignKey: '<%= changeCase.camelCase(association.foreignKey) %>',
      as: '<%= asAlias %>',
      <%_ if (!!association.through) { -%>
      through: models.<%= throughModel %>,
      otherKey: '<%= changeCase.camelCase(association.otherKey) %>',
      <%_ } -%>
    })

  <%_ }) -%>
  }
}
