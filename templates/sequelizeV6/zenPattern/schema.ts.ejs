<%_
const modelName = include('_partials/modelNames.ejs', {
  modelName: changeCase.pascalCase(table.name),
})
const attributesInterfaceName = `${modelName}Attributes`
const createAttributeInterfaceName = `${modelName}CreateAttributes`
const hasCreated = table.columns.has('created')
const hasModified = table.columns.has('modified')
const quote = getQuote()

const fileName = changeCase.paramCase(modelName)
setOutputFileName(`server/sequelize/schema/${fileName}.ts`)
-%>
-%>
// <%= quote.text %> - <%= quote.author %>
// Generated: <%= new Date().toLocaleDateString()  %>

import {
  DataTypes,
  Model,
  Optional
} from 'sequelize'

import <%= modelName %> from '../models/<%= fileName %>'
import {
  AppSchema,
  <%_ if (hasCreated) { -%>
  CreateAttribute,
  <%_ } if (hasModified) { -%>
  ModifyAttribute,
  <%_ } -%>
} from './'


export <%- include('_partials/modelClass.ts.ejs', {
  table,
  modelName: `${modelName}Schema`,
  attributesInterfaceName,
  createAttributeInterfaceName
}) %>

export <%- include('_partials/attributesInterface.ts.ejs', {
  table,
  attributesInterfaceName,
  hasCreated,
  hasModified
}) %>

export <%- include('_partials/createAttributesInterface.ts.ejs', {
  table,
  attributesInterfaceName,
  createAttributeInterfaceName
}) %>

export const schema: AppSchema<typeof <%= modelName %>> = {
  init: (sequelize, model) => {
    model.init({
    <%_ table.columns.forEach((column, columnName) => { -%>
      <%= changeCase.camelCase(columnName) %>: {
<%- include('_partials/dataType.ejs', {
  column,
  changeCase,
  _
}) -%>,
        field: '<%= columnName %>',
        <%_ if (column.primaryKey) { -%>
        primaryKey: true,
        <%_ } if (column.autoIncrement) { -%>
        autoIncrement: true,
        <%_ } if (!column.allowNull) { -%>
        allowNull: false,
        <%_ } if (!!column.unique) { -%>
        unique: <%- (_.isString(column.unique)) ? `'${column.unique}'` : column.unique %>,
        <%_ } if (!_.isEmpty(column.comment)) { -%>
        comment: '<%= column.comment %>',
        <%_ } if (!_.isEmpty(column.reference)) { -%>
        references: <%- include('_partials/reference.ejs', { reference: column.reference }) -%>
        <%_ } -%>
      },
    <%_ }) -%>
    }, {
      sequelize,
      tableName: '<%= table.name %>',
      timestamps: <%= (hasCreated | hasModified) ? true : false %>,
      createdAt: <%- (hasCreated) ? `'created'` : false %>,
      updatedAt: <%- (hasModified) ? `'modified'` : false %>,
    })
  },
  associate: (<% if (!!table.associations.length) { %>models<% } %>) => {
  <%_ 
  table.associations.forEach((association) => {
    const targetModel = include('_partials/modelNames.ejs', { modelName: changeCase.pascalCase(association.target) })
    const throughModel = association.through && include('_partials/modelNames.ejs', { modelName: changeCase.pascalCase(association.through) })
    const asAlias = changeCase.camelCase(targetModel) + (association.associationType.endsWith('Many') ? 's' : '')
  -%>
    models.<%= modelName %>.<%= association.associationType %>(models.<%= targetModel %>, {
      foreignKey: '<%= changeCase.camelCase(association.foreignKey) %>',
      as: '<%= asAlias %>',
      <%_ if (!!association.through) { -%>
      through: models.<%= throughModel %>,
      otherKey: '<%= changeCase.camelCase(association.otherKey) %>',
      <%_ } -%>
    })

  <%_ }) -%>
  }
}
